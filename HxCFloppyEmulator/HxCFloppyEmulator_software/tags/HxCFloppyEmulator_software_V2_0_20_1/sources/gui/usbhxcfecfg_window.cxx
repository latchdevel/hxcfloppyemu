// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "usbhxcfecfg_window.h"

extern void tick_usb(void *v);
void usbhxcfecfg_window::cb_OK_i(Fl_Button* o, void*) {
  ((Fl_Window*)(o->parent()))->hide();
}
void usbhxcfecfg_window::cb_OK(Fl_Button* o, void* v) {
  ((usbhxcfecfg_window*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

usbhxcfecfg_window::usbhxcfecfg_window() {
  { window = new Fl_Double_Window(572, 242, "USB HxC Floppy Emulator settings and status");
    window->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(5, 17, 400, 63, "USB HxC Floppy Emulator status");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { strout_usbhfestatus = new Fl_Output(65, 42, 315, 25, "Status");
        strout_usbhfestatus->labelsize(12);
      } // Fl_Output* strout_usbhfestatus
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(5, 87, 400, 150, "USB statistics and settings");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { strout_maxsettletime = new Fl_Output(96, 134, 107, 20, "Max settle time");
        strout_maxsettletime->labelsize(12);
        strout_maxsettletime->textsize(12);
      } // Fl_Output* strout_maxsettletime
      { strout_minsettletime = new Fl_Output(96, 156, 107, 20, "Min settle time");
        strout_minsettletime->labelsize(12);
        strout_minsettletime->textsize(12);
      } // Fl_Output* strout_minsettletime
      { valout_synclost = new Fl_Value_Output(307, 178, 93, 20, "Sync lost");
        valout_synclost->labelsize(12);
        valout_synclost->textsize(12);
      } // Fl_Value_Output* valout_synclost
      { strout_packetsent = new Fl_Output(307, 156, 93, 20, "Packet sent");
        strout_packetsent->labelsize(12);
        strout_packetsent->textsize(12);
      } // Fl_Output* strout_packetsent
      { strout_datasent = new Fl_Output(307, 134, 93, 20, "Data sent");
        strout_datasent->labelsize(12);
        strout_datasent->textsize(12);
      } // Fl_Output* strout_datasent
      { strout_datathroughput = new Fl_Output(307, 112, 93, 20, "Data throughput");
        strout_datathroughput->labelsize(12);
        strout_datathroughput->textsize(12);
      } // Fl_Output* strout_datathroughput
      { Fl_Button* o = new Fl_Button(307, 211, 93, 20, "Reset");
        o->callback((Fl_Callback*)resetusbstat_bt, (void*)(this));
      } // Fl_Button* o
      { slider_usbpacket_size = new Fl_Value_Slider(96, 112, 107, 20, "Packet size");
        slider_usbpacket_size->type(1);
        slider_usbpacket_size->labelsize(12);
        slider_usbpacket_size->textsize(12);
        slider_usbpacket_size->callback((Fl_Callback*)usbifcfg_window_datachanged, (void*)(this));
        slider_usbpacket_size->align(FL_ALIGN_LEFT);
      } // Fl_Value_Slider* slider_usbpacket_size
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(410, 17, 105, 114, "Drive ID setting");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { rbt_ds2 = new Fl_Round_Button(415, 61, 25, 25, "DS2");
        rbt_ds2->type(102);
        rbt_ds2->down_box(FL_ROUND_DOWN_BOX);
        rbt_ds2->labelsize(12);
        rbt_ds2->callback((Fl_Callback*)usbifcfg_window_datachanged, (void*)(this));
      } // Fl_Round_Button* rbt_ds2
      { rbt_ds3 = new Fl_Round_Button(415, 75, 25, 25, "MTRON");
        rbt_ds3->type(102);
        rbt_ds3->down_box(FL_ROUND_DOWN_BOX);
        rbt_ds3->labelsize(12);
        rbt_ds3->callback((Fl_Callback*)usbifcfg_window_datachanged, (void*)(this));
      } // Fl_Round_Button* rbt_ds3
      { chk_twistedcable = new Fl_Check_Button(415, 90, 25, 25, "Twisted cable");
        chk_twistedcable->down_box(FL_DOWN_BOX);
        chk_twistedcable->labelsize(12);
        chk_twistedcable->callback((Fl_Callback*)usbifcfg_window_datachanged, (void*)(this));
      } // Fl_Check_Button* chk_twistedcable
      { chk_disabledrive = new Fl_Check_Button(415, 106, 25, 25, "Disable drive");
        chk_disabledrive->down_box(FL_DOWN_BOX);
        chk_disabledrive->labelsize(12);
        chk_disabledrive->callback((Fl_Callback*)usbifcfg_window_datachanged, (void*)(this));
      } // Fl_Check_Button* chk_disabledrive
      { rbt_ds0 = new Fl_Round_Button(415, 31, 25, 25, "DS0");
        rbt_ds0->type(102);
        rbt_ds0->down_box(FL_ROUND_DOWN_BOX);
        rbt_ds0->labelsize(12);
        rbt_ds0->callback((Fl_Callback*)usbifcfg_window_datachanged, (void*)(this));
      } // Fl_Round_Button* rbt_ds0
      { rbt_ds1 = new Fl_Round_Button(415, 46, 25, 25, "DS1");
        rbt_ds1->type(102);
        rbt_ds1->down_box(FL_ROUND_DOWN_BOX);
        rbt_ds1->labelsize(12);
        rbt_ds1->callback((Fl_Callback*)usbifcfg_window_datachanged, (void*)(this));
      } // Fl_Round_Button* rbt_ds1
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(410, 128, 105, 109, "Mode");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { chk_autoifmode = new Fl_Check_Button(415, 198, 25, 25, "Auto");
        chk_autoifmode->down_box(FL_DOWN_BOX);
        chk_autoifmode->labelsize(12);
        chk_autoifmode->callback((Fl_Callback*)ifcfg2_window_datachanged, (void*)(this));
        chk_autoifmode->when(FL_WHEN_CHANGED);
      } // Fl_Check_Button* chk_autoifmode
      { chk_doublestep = new Fl_Check_Button(415, 212, 25, 25, "Double Step");
        chk_doublestep->down_box(FL_DOWN_BOX);
        chk_doublestep->labelsize(12);
        chk_doublestep->callback((Fl_Callback*)ifcfg2_window_datachanged, (void*)(this));
        chk_doublestep->when(FL_WHEN_CHANGED);
      } // Fl_Check_Button* chk_doublestep
      { choice_ifmode = new Fl_Choice(415, 152, 95, 20);
        choice_ifmode->down_box(FL_BORDER_BOX);
        choice_ifmode->labelsize(12);
        choice_ifmode->textsize(12);
        choice_ifmode->callback((Fl_Callback*)ifcfg2_window_datachanged, (void*)(this));
      } // Fl_Choice* choice_ifmode
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(520, 17, 45, 25, "OK");
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Button* o
    window->end();
  } // Fl_Double_Window* window
  tick_usb(this);
}
