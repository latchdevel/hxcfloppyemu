// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "batch_converter_window.h"

extern "C"
{
	#include "libhxcfe.h"
	#include "usb_hxcfloppyemulator.h"
}

#include "cb_batch_converter_window.h"
#include "fl_dnd_box.h"

batch_converter_window::batch_converter_window() {
  { window = new Fl_Double_Window(411, 286, "Floppy Disk Images Batch converter");
    window->user_data((void*)(this));
    { choice_file_format = new Fl_Choice(19, 26, 381, 23, "Target file format :");
      choice_file_format->down_box(FL_BORDER_BOX);
      choice_file_format->labelsize(12);
      choice_file_format->textsize(12);
      choice_file_format->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Choice* choice_file_format
    { strin_src_dir = new Fl_Input(19, 70, 271, 25, "Source directory");
      strin_src_dir->labelsize(12);
      strin_src_dir->textsize(12);
      strin_src_dir->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Input* strin_src_dir
    { strin_dst_dir = new Fl_Input(19, 138, 271, 24, "Target directory");
      strin_dst_dir->labelsize(12);
      strin_dst_dir->textsize(12);
      strin_dst_dir->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Input* strin_dst_dir
    { strout_convert_status = new Fl_Output(19, 171, 381, 30);
      strout_convert_status->box(FL_PLASTIC_UP_BOX);
      strout_convert_status->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Output* strout_convert_status
    { bt_select_src = new Fl_Button(304, 69, 95, 25, "Select");
      bt_select_src->callback((Fl_Callback*)batch_converter_window_bt_select_src);
    } // Fl_Button* bt_select_src
    { bt_select_dst = new Fl_Button(304, 137, 95, 25, "Select");
      bt_select_dst->callback((Fl_Callback*)batch_converter_window_bt_select_dst);
    } // Fl_Button* bt_select_dst
    { bt_convert = new Fl_Button(190, 210, 100, 25, "Convert");
      bt_convert->callback((Fl_Callback*)batch_converter_window_bt_convert);
    } // Fl_Button* bt_convert
    { bt_cancel = new Fl_Button(300, 210, 100, 25, "Cancel");
      bt_cancel->callback((Fl_Callback*)batch_converter_window_bt_cancel);
    } // Fl_Button* bt_cancel
    { hlptxt = new Fl_Output(5, 208, 400, 72);
      hlptxt->box(FL_NO_BOX);
      hlptxt->align(Fl_Align(37));
      hlptxt->deactivate();
    } // Fl_Output* hlptxt
    { chkbox_rawinputsfiles = new Fl_Check_Button(18, 102, 200, 15, "Treat input files as RAW files");
      chkbox_rawinputsfiles->down_box(FL_DOWN_BOX);
      chkbox_rawinputsfiles->callback((Fl_Callback*)batch_converter_window_inputasrawfile, (void*)(this));
    } // Fl_Check_Button* chkbox_rawinputsfiles
    { progress_indicator = new Fl_Progress(20, 213, 165, 20);
      progress_indicator->selection_color((Fl_Color)149);
      progress_indicator->callback((Fl_Callback*)batch_converter_window_progress_indicator, (void*)(this));
    } // Fl_Progress* progress_indicator

    Fl_DND_Box *o = new Fl_DND_Box(0, 0,413, 286, 0);
    o->callback(dnd_bc_cb);

    window->end();
  } // Fl_Double_Window* window
}
