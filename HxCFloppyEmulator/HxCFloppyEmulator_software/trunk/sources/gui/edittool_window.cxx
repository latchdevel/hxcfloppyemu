// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "edittool_window.h"

trackedittool_window::trackedittool_window() {
  { window = new Fl_Double_Window(190, 273, "Track edition toolbar");
    window->labelsize(12);
    window->user_data((void*)(this));
    { bt_copy = new Fl_Button(7, 43, 90, 20, "Copy");
      bt_copy->labelsize(10);
      bt_copy->callback((Fl_Callback*)edittool_window_bt_copy_callback, (void*)(this));
    } // Fl_Button* bt_copy
    { bt_startpoint = new Fl_Button(7, 3, 90, 20, "Select start point");
      bt_startpoint->labelsize(10);
      bt_startpoint->callback((Fl_Callback*)edittool_window_bt_startpoint_callback, (void*)(this));
    } // Fl_Button* bt_startpoint
    { bt_endpoint = new Fl_Button(7, 23, 90, 20, "Select end point");
      bt_endpoint->labelsize(10);
      bt_endpoint->callback((Fl_Callback*)edittool_window_bt_endpoint_callback, (void*)(this));
    } // Fl_Button* bt_endpoint
    { bt_paste = new Fl_Button(7, 63, 90, 20, "Paste");
      bt_paste->labelsize(10);
      bt_paste->callback((Fl_Callback*)edittool_window_bt_paste_callback, (void*)(this));
    } // Fl_Button* bt_paste
    { bt_fill = new Fl_Button(7, 83, 90, 20, "Fill");
      bt_fill->labelsize(10);
      bt_fill->callback((Fl_Callback*)edittool_window_bt_fill_callback, (void*)(this));
    } // Fl_Button* bt_fill
    { edit_startpoint = new Fl_Int_Input(99, 2, 85, 20);
      edit_startpoint->type(2);
      edit_startpoint->labelsize(10);
      edit_startpoint->textsize(10);
    } // Fl_Int_Input* edit_startpoint
    { edit_endpoint = new Fl_Int_Input(99, 23, 85, 20);
      edit_endpoint->type(2);
      edit_endpoint->labelsize(10);
      edit_endpoint->textsize(10);
    } // Fl_Int_Input* edit_endpoint
    { bt_insert = new Fl_Button(7, 103, 90, 20, "Insert");
      bt_insert->labelsize(10);
      bt_insert->callback((Fl_Callback*)edittool_window_bt_insert_callback, (void*)(this));
    } // Fl_Button* bt_insert
    { bt_delete = new Fl_Button(7, 123, 90, 20, "Delete");
      bt_delete->labelsize(10);
      bt_delete->callback((Fl_Callback*)edittool_window_bt_delete_callback, (void*)(this));
    } // Fl_Button* bt_delete
    { bt_setflakey = new Fl_Button(7, 143, 90, 20, "Set Flakey pattern");
      bt_setflakey->labelsize(10);
      bt_setflakey->callback((Fl_Callback*)edittool_window_bt_flakeypattern_callback, (void*)(this));
    } // Fl_Button* bt_setflakey
    { bt_setbitrate = new Fl_Button(7, 163, 90, 20, "Set bitrate");
      bt_setbitrate->labelsize(10);
      bt_setbitrate->callback((Fl_Callback*)edittool_window_bt_setbitrate_callback, (void*)(this));
    } // Fl_Button* bt_setbitrate
    { bt_directedition = new Fl_Light_Button(7, 203, 90, 20, "Direct edition");
      bt_directedition->labelsize(10);
      bt_directedition->user_data((void*)(this));
    } // Fl_Light_Button* bt_directedition
    { edit_bitrate = new Fl_Int_Input(100, 163, 85, 20);
      edit_bitrate->type(2);
      edit_bitrate->labelsize(10);
      edit_bitrate->textsize(10);
      edit_bitrate->user_data((void*)(this));
    } // Fl_Int_Input* edit_bitrate
    { edit_editbuffer = new Fl_Int_Input(8, 224, 177, 35);
      edit_editbuffer->type(2);
      edit_editbuffer->labelsize(10);
      edit_editbuffer->textsize(10);
      edit_editbuffer->user_data((void*)(this));
    } // Fl_Int_Input* edit_editbuffer
    { bt_shift = new Fl_Button(7, 183, 90, 20, "Shift");
      bt_shift->labelsize(10);
      bt_shift->callback((Fl_Callback*)edittool_window_bt_shift_callback, (void*)(this));
    } // Fl_Button* bt_shift
    window->end();
  } // Fl_Double_Window* window
}
