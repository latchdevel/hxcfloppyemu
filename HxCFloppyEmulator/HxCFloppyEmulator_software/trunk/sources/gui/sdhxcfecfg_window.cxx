// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "sdhxcfecfg_window.h"
#include "cb_sdhxcfecfg_window.h"

void sdhxcfecfg_window::cb_OK_i(Fl_Button* o, void*) {
  ((Fl_Window*)(o->parent()))->hide();
}
void sdhxcfecfg_window::cb_OK(Fl_Button* o, void* v) {
  ((sdhxcfecfg_window*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

sdhxcfecfg_window::sdhxcfecfg_window() {
  { window = new Fl_Double_Window(492, 267, "SDCard HxC Floppy Emulator settings");
    window->labelsize(12);
    window->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(5, -1, 315, 260, "SD HxC Floppy Emulator settings");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelsize(10);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Group* o = new Fl_Group(15, 39, 135, 120, "User interface");
        o->box(FL_SHADOW_BOX);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelsize(10);
        o->align(FL_ALIGN_TOP_LEFT);
        { slider_uisound_level = new Fl_Slider(25, 59, 105, 15, "UI Sound");
          slider_uisound_level->tooltip("Sound level");
          slider_uisound_level->type(5);
          slider_uisound_level->labelsize(12);
          slider_uisound_level->callback((Fl_Callback*)sdhxcfecfg_window_datachanged, (void*)(this));
          slider_uisound_level->align(FL_ALIGN_TOP);
        } // Fl_Slider* slider_uisound_level
        { slider_stepsound_level = new Fl_Slider(25, 94, 105, 15, "Head step sound");
          slider_stepsound_level->tooltip("Track change sound level");
          slider_stepsound_level->type(5);
          slider_stepsound_level->labelsize(12);
          slider_stepsound_level->callback((Fl_Callback*)sdhxcfecfg_window_datachanged, (void*)(this));
          slider_stepsound_level->align(FL_ALIGN_TOP);
        } // Fl_Slider* slider_stepsound_level
        { slider_scrolltxt_speed = new Fl_Slider(25, 129, 105, 15, "Scroll text speed");
          slider_scrolltxt_speed->tooltip("Filename scrolling speed (used if the filename has more than 16 characters)");
          slider_scrolltxt_speed->type(5);
          slider_scrolltxt_speed->labelsize(12);
          slider_scrolltxt_speed->callback((Fl_Callback*)sdhxcfecfg_window_datachanged, (void*)(this));
          slider_scrolltxt_speed->align(FL_ALIGN_TOP);
        } // Fl_Slider* slider_scrolltxt_speed
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(155, 39, 145, 75, "Standby");
        o->box(FL_SHADOW_BOX);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelsize(10);
        o->align(FL_ALIGN_TOP_LEFT);
        { valslider_device_standby_timeout = new Fl_Value_Slider(167, 89, 120, 15, "Device standby");
          valslider_device_standby_timeout->type(5);
          valslider_device_standby_timeout->labelsize(12);
          valslider_device_standby_timeout->callback((Fl_Callback*)sdhxcfecfg_window_datachanged, (void*)(this));
          valslider_device_standby_timeout->align(FL_ALIGN_TOP);
        } // Fl_Value_Slider* valslider_device_standby_timeout
        { valslider_device_backlight_timeout = new Fl_Value_Slider(167, 60, 120, 15, "Backlight standby");
          valslider_device_backlight_timeout->type(5);
          valslider_device_backlight_timeout->labelsize(12);
          valslider_device_backlight_timeout->callback((Fl_Callback*)sdhxcfecfg_window_datachanged, (void*)(this));
          valslider_device_backlight_timeout->align(FL_ALIGN_TOP);
        } // Fl_Value_Slider* valslider_device_backlight_timeout
        o->end();
      } // Fl_Group* o
      { chk_loadlastloaded = new Fl_Check_Button(155, 114, 25, 25, "Load last loaded floppy");
        chk_loadlastloaded->down_box(FL_DOWN_BOX);
        chk_loadlastloaded->labelsize(12);
        chk_loadlastloaded->callback((Fl_Callback*)sdhxcfecfg_window_datachanged, (void*)(this));
      } // Fl_Check_Button* chk_loadlastloaded
      { chk_disabediskdriveselector = new Fl_Check_Button(155, 134, 25, 25, "Disable disk drive selector");
        chk_disabediskdriveselector->down_box(FL_DOWN_BOX);
        chk_disabediskdriveselector->labelsize(12);
        chk_disabediskdriveselector->callback((Fl_Callback*)sdhxcfecfg_window_datachanged, (void*)(this));
      } // Fl_Check_Button* chk_disabediskdriveselector
      { chk_force_loading_startupa = new Fl_Check_Button(15, 164, 25, 15, "Force loading STARTUPA.HFE into the drive A at power up");
        chk_force_loading_startupa->down_box(FL_DOWN_BOX);
        chk_force_loading_startupa->labelsize(11);
        chk_force_loading_startupa->callback((Fl_Callback*)sdhxcfecfg_window_datachanged, (void*)(this));
      } // Fl_Check_Button* chk_force_loading_startupa
      { chk_force_loading_startupb = new Fl_Check_Button(15, 179, 25, 21, "Force loading STARTUPB.HFE into the drive B at power up");
        chk_force_loading_startupb->down_box(FL_DOWN_BOX);
        chk_force_loading_startupb->labelsize(11);
        chk_force_loading_startupb->callback((Fl_Callback*)sdhxcfecfg_window_datachanged, (void*)(this));
      } // Fl_Check_Button* chk_force_loading_startupb
      { Fl_Group* o = new Fl_Group(5, 204, 315, 55, "AUTO BOOT Mode / File Selector software startup");
        o->box(FL_ENGRAVED_FRAME);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->labelsize(10);
        o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
        { chk_enable_autoboot_mode = new Fl_Check_Button(9, 214, 25, 25, "Enable auto boot mode");
          chk_enable_autoboot_mode->down_box(FL_DOWN_BOX);
          chk_enable_autoboot_mode->labelsize(11);
          chk_enable_autoboot_mode->callback((Fl_Callback*)sdhxcfecfg_window_datachanged, (void*)(this));
        } // Fl_Check_Button* chk_enable_autoboot_mode
        { chk_force_loading_autoboot = new Fl_Check_Button(9, 234, 25, 25, "Force loading AUTOBOOT.HFE at power up");
          chk_force_loading_autoboot->down_box(FL_DOWN_BOX);
          chk_force_loading_autoboot->labelsize(12);
          chk_force_loading_autoboot->callback((Fl_Callback*)sdhxcfecfg_window_datachanged, (void*)(this));
        } // Fl_Check_Button* chk_force_loading_autoboot
        { chk_preindex = new Fl_Check_Button(150, 215, 25, 25, "Enable index Pre incrementing");
          chk_preindex->down_box(FL_DOWN_BOX);
          chk_preindex->labelsize(11);
          chk_preindex->callback((Fl_Callback*)sdhxcfecfg_window_datachanged, (void*)(this));
        } // Fl_Check_Button* chk_preindex
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(325, -1, 160, 105, "HFE file interfacemode");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelsize(10);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { chk_hfr_autoifmode = new Fl_Check_Button(335, 54, 25, 25, "Auto");
        chk_hfr_autoifmode->down_box(FL_DOWN_BOX);
        chk_hfr_autoifmode->labelsize(12);
        chk_hfr_autoifmode->user_data((void*)(this));
      } // Fl_Check_Button* chk_hfr_autoifmode
      { chk_hfe_doublestep = new Fl_Check_Button(335, 72, 25, 22, "Double Step");
        chk_hfe_doublestep->down_box(FL_DOWN_BOX);
        chk_hfe_doublestep->labelsize(12);
        chk_hfe_doublestep->user_data((void*)(this));
      } // Fl_Check_Button* chk_hfe_doublestep
      { Fl_Button* o = new Fl_Button(425, 59, 50, 17, "Load");
        o->labelsize(12);
        o->user_data((void*)(this));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(425, 76, 50, 16, "Save");
        o->labelsize(12);
        o->user_data((void*)(this));
      } // Fl_Button* o
      { choice_hfeifmode = new Fl_Choice(335, 24, 140, 20);
        choice_hfeifmode->down_box(FL_BORDER_BOX);
        choice_hfeifmode->labelsize(12);
        choice_hfeifmode->textsize(12);
        choice_hfeifmode->user_data((void*)(this));
      } // Fl_Choice* choice_hfeifmode
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(395, 173, 90, 25, "Load config file");
      o->labelsize(12);
      o->callback((Fl_Callback*)sdhxcfecfg_window_bt_load, (void*)(this));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(395, 199, 90, 25, "Save config file");
      o->labelsize(12);
      o->callback((Fl_Callback*)sdhxcfecfg_window_bt_save, (void*)(this));
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(395, 234, 90, 25, "OK");
      o->labelsize(12);
      o->callback((Fl_Callback*)cb_OK, (void*)(this));
    } // Fl_Button* o
    window->end();
  } // Fl_Double_Window* window
}
